File::File(SdFile f, const char *n) {
  // oh man you are kidding me, new() doesn't exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile));
  if (_file) {
    memcpy(_file, &f, sizeof(SdFile));

    strncpy(_name, n, 12);
    _name[12] = 0;

    /* for debugging file open/close leaks
       nfilecount++;
       Serial.print("Created \"");
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
  _file = 0;
  _name[0] = 0;
  //Serial.print("Created empty file object");
}
int File::read() {
  if (_file) {
    return _file->read();
  }
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}

uint32_t File::size() {
  if (! _file) {
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    _file->close();
    free(_file);
    _file = 0;

    /* for debugging file open/close leaks
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}

 File SDClass::open(const char *filepath, uint8_t mode) {
    int pathidx;
    // do the interactive search
    SdFile parentdir = getParentDir(filepath, &pathidx);
    // no more subdirs!
    filepath += pathidx;
    if (! filepath[0]) {
      // it was the directory itself!
      return File(parentdir, "/");
    }
    // Open the file itself
    SdFile file;
    // failed to open a subdir!
    if (!parentdir.isOpen()) {
      return File();
    }
    if (! file.open(parentdir, filepath, mode)) {
      return File();
    }
    // close the parent
    parentdir.close();
    if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE)) {
      file.seekSet(file.fileSize());
    }
    return File(file, filepath);
  }

 boolean SDClass::remove(const char *filepath) {
    return walkPath(filepath, root, callback_remove);
  }

  boolean SDClass::begin(uint8_t csPin) {
    if (root.isOpen()) {
      root.close();
    }
    return card.init(SPI_HALF_SPEED, csPin) &&
           volume.init(card) &&
           root.openRoot(volume);
  }
